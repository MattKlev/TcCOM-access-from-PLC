///////////////////////////////////////////////////////////////////////////////
// RtContextModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "RtContextModule.h"
#include "cppCodeVersion.h"

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CRtContextModule
BEGIN_INTERFACE_MAP(CRtContextModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_I_StateMachine, I_StateMachine)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CRtContextModule, VID_cppCode, CID_cppCodeCRtContextModule)
IMPLEMENT_ITCOMOBJECT(CRtContextModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2_RT(CRtContextModule)
IMPLEMENT_ITCADI(CRtContextModule)
IMPLEMENT_ITCWATCHSOURCE(CRtContextModule)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CRtContextModule 
BEGIN_SETOBJPARA_MAP(CRtContextModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_RtContextModuleState, m_State)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CRtContextModule 
BEGIN_GETOBJPARA_MAP(CRtContextModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_RtContextModuleState, m_State)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CRtContextModule
BEGIN_OBJPARAWATCH_MAP(CRtContextModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_RtContextModuleState, m_State)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CRtContextModule
BEGIN_OBJDATAAREA_MAP(CRtContextModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_RtContextModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_RtContextModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
CRtContextModule::CRtContextModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_State = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
CRtContextModule::~CRtContextModule() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI_RT(CRtContextModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP possibly RT context
//
// Initialize input parameters 
// Allocate memory
HRESULT CRtContextModule::SetObjStatePS_RT(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CRtContextModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	
	// TODO: Add any additional initialization

	if (FAILED(hr))
	{
		// TODO: Cleanup if initialization failed
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CRtContextModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Revert transition from SAFEOP to OP

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP possibly in RT context
HRESULT CRtContextModule::SetObjStateSP_RT()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Revert transition from PREOP to SAFEOP

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_I_StateMachine">
HRESULT CRtContextModule::M_Start()
{
	HRESULT hr = S_OK;
	m_State = 1;
	return hr;
}

HRESULT CRtContextModule::M_Stop()
{
	HRESULT hr = S_OK;
	m_State = 0;
	return hr;
}

HRESULT CRtContextModule::M_GetState(SHORT& State)
{
	HRESULT hr = S_OK;
	State = m_State;
	return hr;
}
///</AutoGeneratedContent>
